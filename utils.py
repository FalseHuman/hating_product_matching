import openpyxl
import re

from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.chrome import ChromeDriverManager

def create_driver():
    options = Options()
    options.add_argument(
        f"user-data-dir=Market_Parser")
    options.add_argument(
        "user-agent=Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.125 Safari/537.36")
    options.add_argument("--headless")
    options.add_argument("--disable-dev-shm-usage")
    options.add_argument("--v=99")
    options.add_argument("--no-sandbox")
    driver = webdriver.Chrome(options=options, service=Service(
            ChromeDriverManager().install()))
    return driver

def clean_price_data(file_path):
    """
    –ß–∏—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ Excel-—Ñ–∞–π–ª–∞, —É–¥–∞–ª—è–µ—Ç –ª–∏—à–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –∏ –æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ –ø–æ —Ç–µ—Ö–Ω–∏–∫–µ —Å —Ü–µ–Ω–∞–º–∏,
    —Ñ–æ—Ä–º–∏—Ä—É—è —Å–ª–æ–≤–∞—Ä—å —Ç–∏–ø–∞ {"model": model, "price": price_model, "customer": customer}.

    Args:
        file_path (str): –ü—É—Ç—å –∫ Excel-—Ñ–∞–π–ª—É.

    Returns:
        list or None: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π –∏–ª–∏ None, –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.
    """
    try:
        workbook = openpyxl.load_workbook(file_path)
        sheet = workbook.active
        cleaned_data = []
        current_provider = None
        
        for row in sheet.iter_rows(values_only=True):
             if row is None or len(row) < 2: # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
                continue
             line, provider = row

             if provider: # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
                current_provider = provider

             if line is None:
               continue
             line = str(line).strip()  # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏

             if not line:  # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                continue
  
             if re.match(r"^\s*(\(.*\)\s*|\d+\s*/\s*\d+|[Ô£ø‚ô¶Ô∏èüî∏‚öúÔ∏èüåêüî•üì±ü™©‚ö´Ô∏èü´ß\u2066\u200d\uf000-\uf8ff\u2000-\u206F]+\s*.*[Ô£ø‚ô¶Ô∏èüî∏‚öúÔ∏èüåêüî•üì±ü™©‚ö´Ô∏èü´ß\u2066\u200d\uf000-\uf8ff\u2000-\u206F]+|[-‚îÅ‚îÄ‚â™‚â´]+|\(–û—Ç\s+\d+—à—Ç\s*\)|\d+\s*-|[\w\s]+(S\/M|M\/L|X\/L)[\s\d-]*|[\w\s]+(SB|SL|AL|TL|BL|OB)[\s\d-]*)\s*$",line):
                continue
             elif re.match(r"^[\w\s]+,\s*\[\d{2}\.\d{2}\.\d{4}", line):
                 continue #–ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Ç–∏–ø–∞ ‚ÄºÔ∏èHI‚ÄºÔ∏è, [09.12.2024
             elif re.match(r"^‚ÄºÔ∏è.+‚ÄºÔ∏è$", line):
               continue # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ  ‚ÄºÔ∏è
             elif re.match(r"^[\w\s\d]+[-_\s:,.+]+$",line):
                 continue #–ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Ç–∏–ø–∞  "–ü—Ä–æ–¥–∞–µ–º –º–∏–∫—Å–æ–º –æ—Ç 10—à—Ç"  –∏–ª–∏ "MiHonor –û–ø—Ç–æ–º Apple Samsung Xiaom,"
             elif re.match(r"^[\w\s]+\s*-\s*\d+\s*[\w/]*$", line):
                 continue # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Ç–∏–ø–∞ SE2 40 - 20000
             elif re.match(r"(.+)\s+(\d+)([\w/]+)?", line):
                name, price, region = re.match(r"(.+)\s+(\d+)([\w/]+)?", line).groups()
                if int(price) > 100:
                    cleaned_data.append({
                    "model": name.strip(),
                    "price": int(price),
                    "customer": current_provider
                        })
        return cleaned_data
    except FileNotFoundError:
        print(f"–û—à–∏–±–∫–∞: –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
        return None
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        return None